{
	"info": {
		"_postman_id": "77b603e2-796c-4ebf-91e0-e31ba178ffe1",
		"name": "M183",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45472527",
		"_collection_link": "https://mikolajkulig.postman.co/workspace/Mikolaj-Kulig's-Workspace~448a3f1c-4fe6-4e22-8f89-204fabdfa448/collection/45472527-77b603e2-796c-4ebf-91e0-e31ba178ffe1?action=share&source=collection_link&creator=45472527"
	},
	"item": [
		{
			"name": "SQL Injection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"first_name\": \"');UPDATE users SET first_name = 'Peter' WHERE first_name = 'John';--\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/users",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Testeintrag",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Testeintrag\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"first_name\": \"John\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/users",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Kontrolle",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2.3 Verifizierung\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"    \r",
							"    const records = pm.response.json();\r",
							"    const hasPeter = records.some(record => record.first_name === \"Peter\");\r",
							"    \r",
							"    pm.expect(hasPeter).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8000/users",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	]
}